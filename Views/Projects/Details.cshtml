@model TaskManagementSystem.Models.Project

@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@{
    var antiforgeryTokenSet = Xsrf.GetAndStoreTokens(Context);
    ViewData["Title"] = "Project Details";

    var todoCount = Model.Task.Count(t => t.Status == "To Do");
    var inProgressCount = Model.Task.Count(t => t.Status == "In Progress");
    var doneCount = Model.Task.Count(t => t.Status == "Done");
}

<h2>@Model.Name</h2>
<p>@Model.Description</p>

<h3>Tasks</h3>
<div class="row">
    <div class="col-md-4 border-end">
        <h4 id="todoCountHeader">To Do (@todoCount)</h4>

        <div id="todoColumn" class="task-column">
            @foreach (var task in Model.Task.Where(t => t.Status == "To Do"))
            {
                <div class="card mb-3 task-card" data-task-id="@task.Task_id">
                    <div class="card-body">
                        <h5 class="card-title">@task.Title</h5>
                        <h6 class="card-subtitle mb-2 text-muted">@task.AssignedUser?.UserName</h6>
                        <p class="card-text">@task.Description</p>
                        <p class="card-text"><small class="text-muted">Created At: @task.CreateAt</small></p>
                        <p class="card-text"><small class="text-muted">Due Date: @task.DueDate.ToShortDateString()</small></p>
                        <p class="card-text"><small class="text-muted">Updated At: <span class="updated-at">@task.UpdateAt</span></small></p>
                        <a class="btn btn-primary" asp-controller="Tasks" asp-action="Edit" asp-route-id="@task.Task_id">Edit</a>
                    </div>
                </div>
            }
        </div>
        <div class="row mx-2">
            <a class="btn btn-outline-secondary" asp-area="" asp-controller="Tasks" asp-action="Add" asp-route-projectId="@Model.Project_id" asp-route-status="To Do"> <i class="bi bi-plus"></i> Add Card</a>
        </div>
    </div>
    <div class="col-md-4 border-end">
        <h4 id="inProgressCountHeader">In Progress (@inProgressCount)</h4>
        <div id="inProgressColumn" class="task-column">
            @foreach (var task in Model.Task.Where(t => t.Status == "In Progress"))
            {
                <div class="card mb-3 task-card" data-task-id="@task.Task_id">
                    <div class="card-body">
                        <h5 class="card-title">@task.Title</h5>
                        <h6 class="card-subtitle mb-2 text-muted">@task.AssignedUser?.UserName</h6>
                        <p class="card-text">@task.Description</p>
                        <p class="card-text"><small class="text-muted">Created At: @task.CreateAt</small></p>
                        <p class="card-text"><small class="text-muted">Due Date: @task.DueDate.ToShortDateString()</small></p>
                        <p class="card-text"><small class="text-muted">Updated At: <span class="updated-at">@task.UpdateAt</span></small></p>
                        <a class="btn btn-primary" asp-controller="Tasks" asp-action="Edit" asp-route-id="@task.Task_id">Edit</a>
                    </div>
                </div>
            }
        </div>
        <div class="row mx-2">
            <a class="btn btn-outline-secondary" asp-area="" asp-controller="Tasks" asp-action="Add" asp-route-projectId="@Model.Project_id" asp-route-status="In Progress"> <i class="bi bi-plus"></i> Add Card</a>
        </div>
    </div>
    <div class="col-md-4">
        <h4 id="doneCountHeader">Done (@doneCount)</h4>
        <div id="doneColumn" class="task-column">
            @foreach (var task in Model.Task.Where(t => t.Status == "Done"))
            {
                <div class="card mb-3 task-card" data-task-id="@task.Task_id">
                    <div class="card-body">
                        <h5 class="card-title">@task.Title</h5>
                        <h6 class="card-subtitle mb-2 text-muted">@task.AssignedUser?.UserName</h6>
                        <p class="card-text">@task.Description</p>
                        <p class="card-text"><small class="text-muted">Created At: @task.CreateAt</small></p>
                        <p class="card-text"><small class="text-muted">Due Date: @task.DueDate.ToShortDateString()</small></p>
                        <p class="card-text"><small class="text-muted">Updated At: <span class="updated-at">@task.UpdateAt</span></small></p>
                        <a class="btn btn-primary" asp-controller="Tasks" asp-action="Edit" asp-route-id="@task.Task_id">Edit</a>
                    </div>
                </div>
            }
        </div>
        <div class="row mx-2">
            <a class="btn btn-outline-secondary" asp-area="" asp-controller="Tasks" asp-action="Add" asp-route-projectId="@Model.Project_id" asp-route-status="Done"> <i class="bi bi-plus"></i> Add Card</a>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var todoColumn = document.getElementById('todoColumn');
            var inProgressColumn = document.getElementById('inProgressColumn');
            var doneColumn = document.getElementById('doneColumn');
            var csrfToken = '@antiforgeryTokenSet.RequestToken';

            var updateTaskCounts = function() {
                var todoCount = todoColumn.children.length;
                var inProgressCount = inProgressColumn.children.length;
                var doneCount = doneColumn.children.length;

                document.getElementById('todoCountHeader').textContent = `To Do (${todoCount})`;
                document.getElementById('inProgressCountHeader').textContent = `In Progress (${inProgressCount})`;
                document.getElementById('doneCountHeader').textContent = `Done (${doneCount})`;
            };

            [todoColumn, inProgressColumn, doneColumn].forEach(function (column) {
                new Sortable(column, {
                    group: 'shared',
                    animation: 150,
                    onEnd: function (evt) {
                        var taskId = evt.item.getAttribute('data-task-id');
                        var newStatus;
                        if (evt.to.id === 'todoColumn') {
                            newStatus = 'To Do';
                        } else if (evt.to.id === 'inProgressColumn') {
                            newStatus = 'In Progress';
                        } else if (evt.to.id === 'doneColumn') {
                            newStatus = 'Done';
                        }

                        // Call your backend to update the status of the task
                        fetch('/Tasks/UpdateStatus', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-CSRF-TOKEN': csrfToken
                            },
                            body: JSON.stringify({ taskId: taskId, status: newStatus })
                        }).then(response => {
                            if (response.ok) {
                                // Cập nhật giá trị UpdatedAt trên thẻ task
                                var card = evt.item;
                                var updatedAtElement = card.querySelector('.updated-at');
                                var updatedAt = new Date().toLocaleString();
                                updatedAtElement.innerText = updatedAt.replace(',', ''); // Loại bỏ dấu phẩy;
                                updateTaskCounts();
                            } else {
                                console.error('Error updating task status');
                            }
                        }).catch(error => {
                            console.error('Error:', error);
                        });
                    }
                });
            });

            // Initial update of task counts
            updateTaskCounts();
        });
    </script>
}